/*!
    \file    usb_hid.h
    \brief   definitions for the USB HID class

    \version 2020-08-04, V1.1.0, firmware for GD32VF103
    \version 2022-06-30, V2.1.0, firmware for GD32VF103
*/

/*
    Copyright (c) 2022, GigaDevice Semiconductor Inc.

    Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice, this 
       list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright notice, 
       this list of conditions and the following disclaimer in the documentation 
       and/or other materials provided with the distribution.
    3. Neither the name of the copyright holder nor the names of its contributors 
       may be used to endorse or promote products derived from this software without 
       specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
OF SUCH DAMAGE.
*/

#ifndef __USB_HID_H
#define __USB_HID_H

#include "usb_ch9_std.h"

#define USBD_HID_CONFIG_DESC_SIZE (USB_CFG_DESC_LEN + USB_ITF_DESC_LEN + USB_HID_DESC_LEN + USB_EP_DESC_LEN * 2)

#define USB_HID_CLASS               0x03U

#define USB_HID_DESC_LEN 0x09U

#define USB_DESCTYPE_HID            0x21U
#define USB_DESCTYPE_REPORT         0x22U

/* HID subclass code */
#define USB_HID_SUBCLASS_BOOT_ITF   0x01U

/* HID protocol codes */
#define USB_HID_PROTOCOL_KEYBOARD   0x01U
#define USB_HID_PROTOCOL_CNTLR      0x02U
#define USB_HID_PROTOCOL_MOUSE      0x03U

#define GET_REPORT                  0x01U
#define GET_IDLE                    0x02U
#define GET_PROTOCOL                0x03U
#define SET_REPORT                  0x09U
#define SET_IDLE                    0x0AU
#define SET_PROTOCOL                0x0BU

// Device Descriptor
#define USB_BCD_RELEASE 0x0200U  // bcdUSB
#define USB_BCD_DEVICE  0x0100U  // bcdDevice

// Configuration Descriptor
// bmAttributes
#define HID_REMOTEWAKEUP BIT(5)
#define HID_SELF_POWERED BIT(6)
#define HID_BUS_POWERED BIT(7)

// MaxPower mA
#define HID_MAXPOWER(x) ((uint8_t)((x) / 2))

// HID Descriptor
#define HID_CD 0x0111U  // bcdHID
#define HID_COUNTRYCODE 0x00U  // bCountryCode

#define USAGE_PAGE 0x05
#define USAGE 0x09
#define COLLECTION 0xa1
#define USAGE_MINIMUM 0x19
#define LOGICAL_MINIMUM 0x15
#define LOGICAL_MAXIMUM 0x25
#define USAGE_MAXIMUM 0x29
#define REPORT_SIZE 0x75
#define REPORT_COUNT 0x95
#define USAGE_TYPE_INPUT 0x81
#define USAGE_TYPE_OUTPUT 0x81
#define END_COLECTION 0xc0

#define USAGE_TYPE_DATA_DV 0x02

enum hid_usage_page {
    USAGE_PAGE_GENERIC_DESKTOP = (uint8_t) 0x01,
    USAGE_PAGE_SIMULATION_CONTROLS,
    USAGE_PAGE_VR,
    USAGE_PAGE_SPORT,
    USAGE_PAGE_GAME_CONTROLS_PAGE,
    USAGE_PAGE_GENERIC,
    USAGE_PAGE_KEYBOARD,
    USAGE_PAGE_LED,
    USAGE_PAGE_BUTTON,
    USAGE_PAGE_ORDINAL,
    USAGE_PAGE_PHONE,
    USAGE_PAGE_CONSUMER,
    USAGE_PAGE_DIGITIZER,
    USAGE_PAGE_PID,
    USAGE_PAGE_UNICODE,
    HID_USAGE_PAGE_ALNUM_DISP = (uint8_t) 0x14,

};

enum hid_generic_desktop_page {
    USAGE_GENERIC_DESKTOP_PAGE_UNDEFINED = (uint8_t) 0x00,
    USAGE_GENERIC_DESKTOP_PAGE_POINTER,
    USAGE_GENERIC_DESKTOP_PAGE_MOUSE,
    USAGE_GENERIC_DESKTOP_PAGE_RESERVED,
    USAGE_GENERIC_DESKTOP_PAGE_JOYSTICK,
    USAGE_GENERIC_DESKTOP_PAGE_GAMEPAD,
    USAGE_GENERIC_DESKTOP_PAGE_KEYBOARD,
    USAGE_GENERIC_DESKTOP_PAGE_KEYPAD,

    USAGE_GENERIC_DESKTOP_PAGE_X = (uint8_t) 0x30,
    USAGE_GENERIC_DESKTOP_PAGE_Y,
    USAGE_GENERIC_DESKTOP_PAGE_Z,
    USAGE_GENERIC_DESKTOP_PAGE_RX,
    USAGE_GENERIC_DESKTOP_PAGE_RY,
    USAGE_GENERIC_DESKTOP_PAGE_RZ,

    USAGE_GENERIC_DESKTOP_PAGE_HAT_SWITCH = (uint8_t) 0x39,

    USAGE_GENERIC_DESKTOP_PAGE_DPAD_UP = (uint8_t) 0x90,
    USAGE_GENERIC_DESKTOP_PAGE_DPAD_DOWN,
    USAGE_GENERIC_DESKTOP_PAGE_DPAD_RIGHT,
    USAGE_GENERIC_DESKTOP_PAGE_DPAD_LEFT,

};

enum hid_button_page {
    USAGE_BUTTON_PAGE_NO = (uint8_t) 0x00,
    USAGE_BUTTON_PAGE_1,
    USAGE_BUTTON_PAGE_2,
    USAGE_BUTTON_PAGE_3,
    USAGE_BUTTON_PAGE_4,
    USAGE_BUTTON_PAGE_5,
    USAGE_BUTTON_PAGE_6,
    USAGE_BUTTON_PAGE_7,
    USAGE_BUTTON_PAGE_8,
    USAGE_BUTTON_PAGE_9,
    USAGE_BUTTON_PAGE_10,
    USAGE_BUTTON_PAGE_11,
    USAGE_BUTTON_PAGE_12,
    USAGE_BUTTON_PAGE_13,
    USAGE_BUTTON_PAGE_14,
    USAGE_BUTTON_PAGE_15,
    USAGE_BUTTON_PAGE_16
};

// report descriptor collection
enum hid_collection {
    COLLECTION_PHYSICAL = (uint8_t) 0x00,
    COLLECTION_APPLICATION,
    COLLECTION_LOGICAL,
    COLLECTION_REPORT,
    COLLECTION_NAMED_ARRAY,
    COLLECTION_USAGE_SWITCH,
    COLLECTION_USAGE_MODIFIER
};

enum hid_keyboard_page {
    KB_PAGE_NONE = (uint8_t) 0x00,
    KB_PAGE_ERRORROLLOVER,
    KB_PAGE_POSTFAIL,
    KB_PAGE_ERRORUNDEFINED,
    KB_PAGE_A,
    KB_PAGE_B,
    KB_PAGE_C,
    KB_PAGE_D,
    KB_PAGE_E,
    KB_PAGE_F,
    KB_PAGE_G,
    KB_PAGE_H,
    KB_PAGE_I,
    KB_PAGE_J,
    KB_PAGE_K,
    KB_PAGE_L,
    KB_PAGE_M,
    KB_PAGE_N,
    KB_PAGE_O,
    KB_PAGE_P,
    KB_PAGE_Q,
    KB_PAGE_R,
    KB_PAGE_S,
    KB_PAGE_T,
    KB_PAGE_U,
    KB_PAGE_V,
    KB_PAGE_W,
    KB_PAGE_X,
    KB_PAGE_Y,
    KB_PAGE_Z,
    KB_PAGE_1_EXCLAMATION_MARK,
    KB_PAGE_2_AT,
    KB_PAGE_3_NUMBER_SIGN,
    KB_PAGE_4_DOLLAR,
    KB_PAGE_5_PERCENT,
    KB_PAGE_6_CARET,
    KB_PAGE_7_AMPERSAND,
    KB_PAGE_8_ASTERISK,
    KB_PAGE_9_OPARENTHESIS,
    KB_PAGE_0_CPARENTHESIS,
    KB_PAGE_ENTER,
    KB_PAGE_ESCAPE,
    KB_PAGE_BACKSPACE,
    KB_PAGE_TAB,
    KB_PAGE_SPACEBAR,
    KB_PAGE_MINUS_UNDERSCORE,
    KB_PAGE_EQUAL_PLUS,
    KB_PAGE_OBRACKET_AND_OBRACE,
    KB_PAGE_CBRACKET_AND_CBRACE,
    KB_PAGE_BACKSLASH_VERTICAL_BAR,
    KB_PAGE_NONUS_NUMBER_SIGN_TILDE,
    KB_PAGE_SEMICOLON_COLON,
    KB_PAGE_SINGLE_AND_DOUBLE_QUOTE,
    KB_PAGE_GRAVE_ACCENT_AND_TILDE,
    KB_PAGE_COMMA_AND_LESS,
    KB_PAGE_DOT_GREATER,
    KB_PAGE_SLASH_QUESTION,
    KB_PAGE_CAPS_LOCK,
    KB_PAGE_F1,
    KB_PAGE_F2,
    KB_PAGE_F3,
    KB_PAGE_F4,
    KB_PAGE_F5,
    KB_PAGE_F6,
    KB_PAGE_F7,
    KB_PAGE_F8,
    KB_PAGE_F9,
    KB_PAGE_F10,
    KB_PAGE_F11,
    KB_PAGE_F12,
    KB_PAGE_PRINTSCREEN,
    KB_PAGE_SCROLL_LOCK,
    KB_PAGE_PAUSE,
    KB_PAGE_INSERT,
    KB_PAGE_HOME,
    KB_PAGE_PAGEUP,
    KB_PAGE_DELETE,
    KB_PAGE_END1,
    KB_PAGE_PAGEDOWN,
    KB_PAGE_RIGHTARROW,
    KB_PAGE_LEFTARROW,
    KB_PAGE_DOWNARROW,
    KB_PAGE_UPARROW,
    KB_PAGE_KEYPAD_NUM_LOCK_AND_CLEAR,
    KB_PAGE_KEYPAD_SLASH,
    KB_PAGE_KEYPAD_ASTERIKS,
    KB_PAGE_KEYPAD_MINUS,
    KB_PAGE_KEYPAD_PLUS,
    KB_PAGE_KEYPAD_ENTER,
    KB_PAGE_KEYPAD_1_END,
    KB_PAGE_KEYPAD_2_DOWN_ARROW,
    KB_PAGE_KEYPAD_3_PAGEDN,
    KB_PAGE_KEYPAD_4_LEFT_ARROW,
    KB_PAGE_KEYPAD_5,
    KB_PAGE_KEYPAD_6_RIGHT_ARROW,
    KB_PAGE_KEYPAD_7_HOME,
    KB_PAGE_KEYPAD_8_UP_ARROW,
    KB_PAGE_KEYPAD_9_PAGEUP,
    KB_PAGE_KEYPAD_0_INSERT,
    KB_PAGE_KEYPAD_DECIMAL_SEPARATOR_DELE,
    KB_PAGE_NONUS_BACK_SLASH_VERTICAL_BAR,
    KB_PAGE_APPLICATION,
    KB_PAGE_POWER,
    KB_PAGE_KEYPAD_EQUAL,
    KB_PAGE_F13,
    KB_PAGE_F14,
    KB_PAGE_F15,
    KB_PAGE_F16,
    KB_PAGE_F17,
    KB_PAGE_F18,
    KB_PAGE_F19,
    KB_PAGE_F20,
    KB_PAGE_F21,
    KB_PAGE_F22,
    KB_PAGE_F23,
    KB_PAGE_F24,
    KB_PAGE_EXECUTE,
    KB_PAGE_HELP,
    KB_PAGE_MENU,
    KB_PAGE_SELECT,
    KB_PAGE_STOP,
    KB_PAGE_AGAIN,
    KB_PAGE_UNDO,
    KB_PAGE_CUT,
    KB_PAGE_COPY,
    KB_PAGE_PASTE,
    KB_PAGE_FIND,
    KB_PAGE_MUTE,
    KB_PAGE_VOLUME_UP,
    KB_PAGE_VOLUME_DOWN,
    KB_PAGE_LOCKING_CAPS_LOCK,
    KB_PAGE_LOCKING_NUM_LOCK,
    KB_PAGE_LOCKING_SCROLL_LOCK,
    KB_PAGE_KEYPAD_COMMA,
    KB_PAGE_KEYPAD_EQUAL_SIGN,
    KB_PAGE_INTERNATIONAL1,
    KB_PAGE_INTERNATIONAL2,
    KB_PAGE_INTERNATIONAL3,
    KB_PAGE_INTERNATIONAL4,
    KB_PAGE_INTERNATIONAL5,
    KB_PAGE_INTERNATIONAL6,
    KB_PAGE_INTERNATIONAL7,
    KB_PAGE_INTERNATIONAL8,
    KB_PAGE_INTERNATIONAL9,
    KB_PAGE_LANG1,
    KB_PAGE_LANG2,
    KB_PAGE_LANG3,
    KB_PAGE_LANG4,
    KB_PAGE_LANG5,
    KB_PAGE_LANG6,
    KB_PAGE_LANG7,
    KB_PAGE_LANG8,
    KB_PAGE_LANG9,
    KB_PAGE_ALTERNATE_ERASE,
    KB_PAGE_SYSREQ,
    KB_PAGE_CANCEL,
    KB_PAGE_CLEAR,
    KB_PAGE_PRIOR,
    KB_PAGE_RETURN,
    KB_PAGE_SEPARATOR,
    KB_PAGE_OUT,
    KB_PAGE_OPER,
    KB_PAGE_CLEAR_AGAIN,
    KB_PAGE_CRSEL,
    KB_PAGE_EXSEL,
    KB_PAGE_KEYPAD_00 = (uint8_t) 0xB0,
    KB_PAGE_KEYPAD_000,
    KB_PAGE_THOUSANDS_SEPARATOR,
    KB_PAGE_DECIMAL_SEPARATOR,
    KB_PAGE_CURRENCY_UNIT,
    KB_PAGE_CURRENCY_SUB_UNIT,
    KB_PAGE_KEYPAD_OPARENTHESIS,
    KB_PAGE_KEYPAD_CPARENTHESIS,
    KB_PAGE_KEYPAD_OBRACE,
    KB_PAGE_KEYPAD_CBRACE,
    KB_PAGE_KEYPAD_TAB,
    KB_PAGE_KEYPAD_BACKSPACE,
    KB_PAGE_KEYPAD_A,
    KB_PAGE_KEYPAD_B,
    KB_PAGE_KEYPAD_C,
    KB_PAGE_KEYPAD_D,
    KB_PAGE_KEYPAD_E,
    KB_PAGE_KEYPAD_F,
    KB_PAGE_KEYPAD_XOR,
    KB_PAGE_KEYPAD_CARET,
    KB_PAGE_KEYPAD_PERCENT,
    KB_PAGE_KEYPAD_LESS,
    KB_PAGE_KEYPAD_GREATER,
    KB_PAGE_KEYPAD_AMPERSAND,
    KB_PAGE_KEYPAD_LOGICAL_AND,
    KB_PAGE_KEYPAD_VERTICAL_BAR,
    KB_PAGE_KEYPAD_LOGIACL_OR,
    KB_PAGE_KEYPAD_COLON,
    KB_PAGE_KEYPAD_NUMBER_SIGN,
    KB_PAGE_KEYPAD_SPACE,
    KB_PAGE_KEYPAD_AT,
    KB_PAGE_KEYPAD_EXCLAMATION_MARK,
    KB_PAGE_KEYPAD_MEMORY_STORE,
    KB_PAGE_KEYPAD_MEMORY_RECALL,
    KB_PAGE_KEYPAD_MEMORY_CLEAR,
    KB_PAGE_KEYPAD_MEMORY_ADD,
    KB_PAGE_KEYPAD_MEMORY_SUBTRACT,
    KB_PAGE_KEYPAD_MEMORY_MULTIPLY,
    KB_PAGE_KEYPAD_MEMORY_DIVIDE,
    KB_PAGE_KEYPAD_PLUSMINUS,
    KB_PAGE_KEYPAD_CLEAR,
    KB_PAGE_KEYPAD_CLEAR_ENTRY,
    KB_PAGE_KEYPAD_BINARY,
    KB_PAGE_KEYPAD_OCTAL,
    KB_PAGE_KEYPAD_DECIMAL,
    KB_PAGE_KEYPAD_HEXADECIMAL,
    KB_PAGE_LEFTCONTROL = (uint8_t) 0xE0,
    KB_PAGE_LEFTSHIFT,
    KB_PAGE_LEFTALT,
    KB_PAGE_LEFT_GUI,
    KB_PAGE_RIGHTCONTROL,
    KB_PAGE_RIGHTSHIFT,
    KB_PAGE_RIGHTALT,
    KB_PAGE_RIGHT_GUI,
};

enum hid_led_page {
    LED_PAGE_UNDEFINED = (uint8_t) 0x00,
    LED_PAGE_NUM_LOCK,
    LED_PAGE_CAPSLOCK,
    LED_PAGE_SCROLLLOCK,
    LED_PAGE_COMPOSE,
    LED_PAGE_KANA,
    LED_PAGE_POWER,
    LED_PAGE_SHIFT
};

#pragma pack(1)

typedef struct
{
    usb_desc_header header;     /*!< regular descriptor header containing the descriptor's type and length */

    uint16_t bcdHID;            /*!< BCD encoded version that the HID descriptor and device complies to */
    uint8_t  bCountryCode;      /*!< country code of the localized device, or zero if universal */
    uint8_t  bNumDescriptors;   /*!< total number of HID report descriptors for the interface */
    uint8_t  bDescriptorType;   /*!< type of HID report */
    uint16_t wDescriptorLength; /*!< length of the associated HID report descriptor, in bytes */
} usb_desc_hid;

#pragma pack()

typedef struct
{
    usb_desc_config         config;
    usb_desc_itf itf;
    usb_desc_hid hid;
    usb_desc_ep epin;
    usb_desc_ep epout;
}usb_hid_desc_config_set;

#endif /* __USB_HID_H */
